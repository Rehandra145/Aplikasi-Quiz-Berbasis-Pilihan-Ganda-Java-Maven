/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projekakhir;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author infinix
 */
public class QuizForm extends javax.swing.JFrame {
    
    private JLabel questionLabel;
    private JRadioButton option1, option2, option3, option4;
    private ButtonGroup optionsGroup;
    private JButton nextButton;
    private JLabel timeLabel;
    private Timer timer;
    private int timeLeft = 50; // 50 seconds
    private MongoCursor<Document> cursor;

    /**
     * Creates new form QuizForm
     */
    public QuizForm() {
        // Setup MongoDB connection
        MongoDatabase database = new NoKoneksi().getDatabase();
        MongoCollection<Document> collection = database.getCollection("soal");
        cursor = collection.find().iterator();
        
        // Setup UI components
        setTitle("Quiz Application");
        setSize(976, 638);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        questionLabel = new JLabel("Question");
        option1 = new JRadioButton("Option 1");
        option2 = new JRadioButton("Option 2");
        option3 = new JRadioButton("Option 3");
        option4 = new JRadioButton("Option 4");
        
        optionsGroup = new ButtonGroup();
        optionsGroup.add(option1);
        optionsGroup.add(option2);
        optionsGroup.add(option3);
        optionsGroup.add(option4);
        
        timeLabel = new JLabel("Time left: " + timeLeft + "s");
        nextButton = new JButton("Next");
        
        
        
        // Layout setup
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(questionLabel);
        panel.add(option1);
        panel.add(option2);
        panel.add(option3);
        panel.add(option4);
        panel.add(timeLabel);
        panel.add(nextButton);
        add(panel);

        // Load first question and start timer
        loadNextQuestion();
        startTimer();      
        
        // Next button action
        nextButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadNextQuestion();
                resetTimer();
            }
        });
    }
    
    private void loadNextQuestion() {
        if (cursor.hasNext()) {
            Document questionDoc = cursor.next();
            questionLabel.setText(questionDoc.getString("question"));
            option1.setText(questionDoc.get("options", Document.class).getString("option1"));
            option2.setText(questionDoc.get("options", Document.class).getString("option2"));
            option3.setText(questionDoc.get("options", Document.class).getString("option3"));
            option4.setText(questionDoc.get("options", Document.class).getString("option4"));
            optionsGroup.clearSelection(); // Clear previous selection
        } else {
            JOptionPane.showMessageDialog(this, "No more questions available.");
            System.exit(0);
        }
    }
    
    private void startTimer() {
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (timeLeft > 0) {
                    timeLeft--;
                    timeLabel.setText("Time left: " + timeLeft + "s");
                } else {
                    timer.cancel();
                    JOptionPane.showMessageDialog(null, "Time's up for this question!");
                    loadNextQuestion();
                    resetTimer();
                }
            }
        }, 0, 1000);
    }
    
    private void resetTimer() {
        if (timer != null) {
            timer.cancel();
        }
        timeLeft = 50; // Reset to 50 seconds
        startTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2147483647, 2147483647)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2147483647, 2147483647)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new QuizForm().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
